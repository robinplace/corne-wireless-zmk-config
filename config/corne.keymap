/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define kp &kp
#define kp__ kp
#define none__ &none
#define trans_ &trans
#define mo &mo
#define bt &bt

#define bt_0__ bt BT_SEL 0
#define bt_1__ bt BT_SEL 1
#define bt_2__ bt BT_SEL 2
#define bt_C__ bt BT_CLR

#define SPA SPACE
#define BSP BACKSPACE
#define COM COMMA
#define SEM SEMI
#define FSL FSLH

#define mp_LOP kp LEFT_ALT
#define mp_LCT kp LEFT_CONTROL
#define mp_LCM kp LEFT_GUI
#define mp_LSH kp LEFT_SHIFT

#define mp_RSH kp RIGHT_SHIFT
#define mp_RCM kp RIGHT_GUI
#define mp_RCT kp RIGHT_CONTROL
#define mp_ROP kp RIGHT_ALT

#define K_1 KP_NUMBER_1
#define K_2 KP_NUMBER_2
#define K_3 KP_NUMBER_3
#define K_4 KP_NUMBER_4
#define K_5 KP_NUMBER_5
#define K_6 KP_NUMBER_6
#define K_7 KP_NUMBER_7
#define K_8 KP_NUMBER_8
#define K_9 KP_NUMBER_9
#define K_0 KP_NUMBER_0

#define kp_AST kp KP_ASTERISK
#define kp_SLA kp KP_SLASH
#define kp_DOT kp KP_DOT
#define kp_PLU kp KP_PLUS
#define kp_MIN kp KP_MINUS
#define kp_EQU kp KP_EQUALS
#define kp_GRA kp GRAVE
#define kp_TIL kp TILDE
#define kp_EXC kp EXCL
#define kp_AMP kp AMPS
#define kp_ATS kp AT

#define ka_LEF kp LEFT_ARROW
#define ka_DOW kp DOWN_ARROW
#define ka_UP_ kp UP_ARROW
#define ka_RIG kp RIGHT_ARROW

#define BAS 0
#define NUM 1
#define SPE 2
#define EXT 3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM SPE>;
            then-layer = <EXT>;
        };
    };
    macros {
    };
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
kp TAB kp__ Q kp__ W kp__ E kp__ R kp__ T   kp__ Y kp__ U kp__ I kp__ O kp__ P kp BSP
kp ESC kp__ A kp__ S kp__ D kp__ F kp__ G   kp__ H kp__ J kp__ K kp__ L kp SEM kp SQT
mp_LSH kp__ Z kp__ X kp__ C kp__ V kp__ B   kp__ N kp__ M kp COM kp DOT kp FSL mp_RSH
                     kp LCT kp LCM kp SPA   kp RET mo NUM mo SPE
            >;
        };

        number_layer {
            label = "NUMBER";
            bindings = <
none__ none__ none__ none__ none__ none__   none__ kp K_7 kp K_8 kp K_9 kp_AST trans_
none__ bt_C__ bt_0__ bt_1__ bt_2__ none__   kp_EQU kp K_4 kp K_5 kp K_6 kp_MIN kp DEL
trans_ none__ none__ none__ none__ none__   kp K_0 kp K_1 kp K_2 kp K_3 kp_PLU trans_
                     none__ trans_ kp SPA   kp RET trans_ trans_
            >;
        };

        special_layer {
            label = "SPECIAL";
            bindings = <
kp_TIL kp__ Q kp__ W kp__ E kp__ R kp__ T   none__ none__ none__ none__ none__ trans_
kp_GRA kp__ A kp__ S kp__ D kp__ F kp__ G   none__ mp_RSH mp_RCM mp_RCT mp_ROP kp DEL
trans_ kp__ Z kp__ X kp__ C kp__ V kp__ B   none__ none__ none__ none__ none__ none__
                     none__ none__ kp SPA   kp RET trans_ trans_
            >;
        };
    };
};
