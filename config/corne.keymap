/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// general abbreviations
#define kp &kp
#define kp_ kp
#define none_ &none
#define trans &trans
#define mo &mo
#define bt &bt

// modifiers
#define mp_LO kp LEFT_ALT
#define mp_LC kp LEFT_CONTROL
#define mp_LM kp LEFT_GUI
#define mp_LS kp LEFT_SHIFT
#define mp_RS kp RIGHT_SHIFT
#define mp_RM kp RIGHT_GUI
#define mp_RC kp RIGHT_CONTROL
#define mp_RO kp RIGHT_ALT

// universal special characters

// base special characters
#define kp_SP SPACE
#define kp_BK BACKSPACE
#define kp_CM COMMA
#define kp_PD PERIOD
#define kp_SM SEMICOLON
#define kp_FS SLASH
#define kp_SQ SINGLE_QUOTE
#define kp_TB TAB
#define kp_ES ESCAPE
#define kp_RE RETURN

// right only special characters
#define kp_DE DELETE

// right and left special characters
#define kp_MI kp MINUS
#define kp_EQ kp EQUAL
#define kp_BS BACKSLASH
#define kp_LK LEFT_BRACKET
#define kp_RK RIGHT_BRACKET

// left only special characters
#define kp_GR GRAVE

#define kp_EX kp KP_ASTERISK
#define kp_SLA kp KP_SLASH
#define kp_DOT kp KP_DOT
#define kp_PLU kp KP_PLUS
#define kp_MIN kp KP_MINUS
#define kp_GRA kp GRAVE
#define kp_TIL kp TILDE
#define kp_EXC kp EXCL
#define kp_AMP kp AMPS
#define kp_ATS kp AT

#define ka_LEF kp LEFT_ARROW
#define ka_DOW kp DOWN_ARROW
#define ka_UP_ kp UP_ARROW
#define ka_RIG kp RIGHT_ARROW

// bluetooth
#define bt_ bt BT_SEL
#define bt__C bt BT_CLR

#define BASE 0
#define RIGHT 1
#define LEFT 2
#define BOTH 3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <RIGHT LEFT>;
            then-layer = <BOTH>;
        };
    };
    macros {
    };
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
kp_TB kp_ Q kp_ W kp_ E kp_ R kp_ T   kp_ Y kp_ U kp_ I kp_ O kp_ P none_
mp_LC kp_ A kp_ S kp_ D kp_ F kp_ G   kp_ H kp_ J kp_ K kp_ L kp_SM kp_SQ
mp_LM kp_ Z kp_ X kp_ C kp_ V kp_ B   kp_ N kp_ M kp_CM kp_PD kp_FS mp_RO
                  kp_ES mp_LS kp_SP   kp_RE mp_RS kp_BK
            >;
        };

        right_layer {
            label = "RIGHT";
            bindings = <
kp_TB kp N1 kp N2 kp N3 kp N4 kp N5   kp_ Y kp_ U kp_ I kp_ O kp_ P none_
mp_LC kp N6 kp N7 kp N8 kp N9 kp N0   kp_ H kp_ J kp_ K kp_ L kp_SM kp_SQ
mp_LM kp_MI kp_EQ kp_BS kp_LK kp_RK   kp_ N kp_ M kp_CM kp_PD kp_FS mp_RO
                  kp_ES mp_LS kp_SP   kp_RE mp_RS kp_DE
            >;
        };

        left_layer {
            label = "LEFT";
            bindings = <
kp_GR kp_ Q kp_ W kp_ E kp_ R kp_ T   kp_LK kp_RK kp N7 kp N8 kp N9 none_
mp_LC kp_ A kp_ S kp_ D kp_ F kp_ G   kp_MI kp_EQ kp N4 kp N5 kp N6 kp_BS
mp_LM kp_ Z kp_ X kp_ C kp_ V kp_ B   kp_GR kp N0 kp N1 kp N2 kp N3 mp_RO
                  kp_ES mp_LS kp_SP   kp_RE mp_RS kp_BK
            >;
        };

        both_layer {
            label = "BOTH";
            bindings = <
none_ none_ none_ none_ none_ none_   none_ none_ none_ none_ none_ none_
none_ none_ none_ none_ none_ none_   none_ none_ none_ none_ none_ none_
none_ none_ none_ none_ none_ none_   none_ none_ none_ none_ none_ none_
                  kp_ES mp_LS kp_SP   kp_RE mp_RS kp_BK
            >;
        };
    };
};
